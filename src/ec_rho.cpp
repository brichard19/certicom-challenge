#include <cassert>
#include <stdexcept>

#include "ec_rho.h"
#include "montgomery.h"
#include "binary_encoder.h"

namespace {
// DO NOT MODIFY
// These are deterministically generated and must
// match on all systems.
std::string _p79_a_str[] = {
"00000000000001985035F593B66F982F7",
"000000000000034673EAB92CA23666F7C",
"00000000000000E0317A8BB7765D292C5",
"000000000000003322AFD240530FCBD98",
"00000000000002DCA268C7C92A4EBB391",
"00000000000002656219AD05BBEF1ED5A",
"00000000000003B890666EEC0D15B27E9",
"00000000000004A3F1E947BADCF991B16",
"00000000000005F3E1BC83CC97E62DD27",
"00000000000000FA1168910DE53691375",
"0000000000000419111FFB172D6F56812",
"00000000000001E872047A4C54E2BEA53",
"00000000000002EA54B55DA4A2F15BA88",
"000000000000008942B1D13A5290B4541",
"00000000000000AA00A9BD915E000294D",
"000000000000003B23CEC97EFB98BB080",
"000000000000022464703078115746286",
"00000000000004C6E121F50BECF97BB57",
"00000000000005057141AFE914C1AFAF1",
"000000000000029B70AD7A9E8AA7B5349",
"00000000000004B780DD77AAF1459F068",
"00000000000003E2E4094AB10C51DD4A1",
"000000000000048C828E8A4F849657AAD",
"00000000000001E4D45DF9F67F2D7CD66",
"0000000000000150421410EF683167CB4",
"00000000000003D521E6FD1A35477F95D",
"000000000000039E42620CF170C7EFE35",
"000000000000036BE097E073BD35D11D2",
"00000000000004F0E4326A1358E892E0E",
"00000000000004EB91EF15E79EAF3C47F",
"000000000000051F0179BB6A163CE5C0D",
"000000000000014872145BB048933A18A",
};

std::string _p79_b_str[] = {
"000000000000056F031A63E63AC1436C2",
"00000000000001AAD22B18A84546338C3",
"00000000000000626237F542EF077707A",
"000000000000030E64359E4F2B91FC889",
"00000000000004CC608E3EEA9CEFFD436",
"000000000000035BC0C185946E8E7FF8C",
"00000000000002AEF144820A2F9AA756E",
"0000000000000284C3BFA26E7F02AE304",
"000000000000059CB32D67F0947C22AEA",
"00000000000003D664FD4EFEE8715C439",
"000000000000025FF25D1496E1B2D33A6",
"00000000000005F5B33F27FA0A3C4DEF7",
"000000000000013F434A470DD2FC90EC5",
"00000000000001A5944EC9F1BB0A56BA2",
"000000000000003C3018BA305D1E9EEDE",
"0000000000000486250F0704C1E20529D",
"0000000000000160E005537D26AFB195A",
"000000000000030B522654140B1948F75",
"00000000000002508031AD6B684F40688",
"00000000000005A2106E00F5567BCDC4E",
"00000000000002B0A37D48D958BE387BF",
"000000000000027D335E58D5BC90442E4",
"00000000000005B52460B3A58BFBA496B",
"000000000000013E23F8BB6AC89AA7C80",
"000000000000007DC2BC6E3D197397425",
"00000000000001DFF4ED9207FA5ED7082",
"00000000000001C661D62B237A146DBFD",
"000000000000011FB349B2F638F33923A",
"00000000000004F48194C04354008829B",
"00000000000002E782DC5314AE5998F49",
"00000000000002E76477AB18180A380F2",
"0000000000000304307796E3E3E0CB8B3",
};

std::string _p79_x_str[] = {
"00000000000003C977D3E95FB4B596039",
"00000000000001897F48D1DD115E3A5BB",
"000000000000033209B045F28617814A2",
"000000000000029F30272AC8C8BF6E346",
"000000000000059D7964C3334375D6A91",
"00000000000002B14F1177E66DF7F004E",
"00000000000003F69A622A06865E89D19",
"00000000000000116D03A06D1D00240D2",
"00000000000005FFBE9DFAB43F0C24CCD",
"00000000000005D386FDD4595E880E43C",
"000000000000061DF977D763981C4DF4E",
"0000000000000218F1251F34EF748F8A3",
"000000000000015C88CCE8414729EB131",
"000000000000029060C60E3CF77D608E4",
"000000000000004ABA1B16E3C07F106DE",
"000000000000002BB0A3D89536DD59F6A",
"0000000000000605E24DFE6C692E58EEF",
"00000000000001F5AF2C753076BF3BA4F",
"00000000000004B91257EF46DD26BAC8B",
"00000000000002E9ADEE306D531997A49",
"00000000000000C5FA7B18E20C4FE9FFC",
"0000000000000196BA956CC0E005FF42E",
"00000000000002E7BCE63351614E86C2A",
"000000000000050A84985DA58F765CC68",
"00000000000000E6A52441A2F82898A1F",
"00000000000001BAF039B089C5CB693C2",
"00000000000002BF877F38B565ECDE3EF",
"00000000000005BD9E465AE890BE3ED8D",
"00000000000000BE708B5DAAD3C915CF5",
"00000000000005903A6D2CB0F919DA6DB",
"0000000000000586173E60D74E9E34B66",
"00000000000001C6148FCE592459C99FD",
};

std::string _p79_y_str[] = {
"00000000000004A9A629845C242C0A49D",
"00000000000003F771031394094DA3C81",
"0000000000000481C09C9EC9FDF3C3977",
"00000000000002E940EFF2C36CF767580",
"00000000000003FB9B11C99D6CA1F5E91",
"00000000000005B00527C020DACF6E53B",
"000000000000057087F74993595BE8763",
"000000000000034214E1965F123AE7D36",
"00000000000002404230ECD2634130BF5",
"00000000000003C15DA64B319AAAE4EE6",
"000000000000055C28453F1C67D8B373E",
"00000000000003100D2823D7F3D13D3A6",
"000000000000017EA2CCE5C881BD18ED3",
"000000000000018E3A83C0CD222662C01",
"000000000000041A080C365BF6FC644A1",
"00000000000001ED84182CF447562AE64",
"000000000000044DFF088B71AF2FFBE14",
"00000000000002CEDA58C4994DC063B43",
"000000000000012ED0717890FB223D20E",
"000000000000002057A286CA875B6F3E4",
"0000000000000294F26C80239FF4BC7BB",
"00000000000002496C2B981454ADE6A4F",
"000000000000055B0E6445386E1D766CC",
"000000000000043FB10D7E8904B648463",
"00000000000000C1DDE045B329B81F597",
"00000000000000407C75CA075E1897A1E",
"000000000000055DAE71602C6ABB8B6E1",
"00000000000003F0E21A5A079509A31F8",
"00000000000003873966AF0A18A125DB1",
"00000000000004330470DA2DE6AACB8AE",
"00000000000002900A5169832E1515340",
"0000000000000027108984D3C364EF3D2",
};


// DO NOT MODIFY
// These are deterministically generated and must
// match on all systems.
std::string _p131_a_str[] = {
"336D6AAFD0B4EBA54CF107DDA20068839",
"469A95D1AB4E39E1B3EAB92CA23666F7C",
"142A402C23CE408F017A8BB7765D292C5",
"21284619240C48EC9A295C34AF860BFA2",
"2772E22D16F5B3D072AFD240530FCBD98",
"4272727FF0A9F2455CE887DE4DE0902DE",
"3752C2E66D0B68E72C307B3335B9AEF8F",
"34AFFD2DAE54A9DE884E9C4DC5847569D",
"17BEA15716A0FE021219AD05BBEF1ED5A",
"266C0E49FC16E28AE9DB6D2981B12B83B",
"140F6760EB58F2E2D1E947BADCF991B16",
"152AD15AA8631BA2A1BC83CC97E62DD27",
"0116E49D3FD323B4BAD93C90A6A413F6C",
"40BAE6B74D09FF7E0168910DE53691375",
"044AE103769A5BA7911FFB172D6F56812",
"30AB929AC84ADDEE62047A4C54E2BEA53",
"04B69D47E7F387105CB253EAAAD72F04E",
"260717C5FD0D872E270CA974E9A44ABBF",
"12B19915B51BCF6D80A9BD915E000294D",
"48054AA84CC147DD16F29CAA0572F0FCA",
"4400FFE5872EC921ECB88A90B35262D6B",
"35CE09AE29C0507CF3CEC97EFB98BB080",
"42F1CE9E81766523487F50E9617366B99",
"349185C61376E7AD056272EE48B18F825",
"156B570C5DE6E8A29D32D51D40B76C482",
"4125A74BC0DC02256B7FABDB5009AE183",
"051F0491F9F1ECD67563C7B6663D7CB78",
"15DD03DDFC47C21B5A1A4D248524F51BE",
"42EE02A3897AC0B52BAE08085C5976BEF",
"344E0205B5EB82693B3D1D91C78C524D4",
"28A4DCB9A10926F8E65FD3CA646C7669B",
"24627B60A11A34F8DC7D6FBA4A7099DF6",
};
std::string _p131_b_str[] = {
"112544750257DB310FDBB403793323965",
"332DB31CC3AAE18A7857AD8D7FC754BB8",
"37F06E74E41D7CDD371C0561987CDF114",
"10DAD09652C34CCC1237F542EF077707A",
"140C71C03C6DD9DCED72AEA738FF635DB",
"4358656FAABF8B73FF4751AAA3C2543B0",
"034B4271DAA36B8644359E4F2B91FC889",
"257A725024C71E0EB0C185946E8E7FF8C",
"32BA17B7D4A094319A8051B0997357732",
"28D533FBBF6C174DC684940A77E0E01E1",
"4208F79696BA5B7A5144820A2F9AA756E",
"384C49E78C6E465033BFA26E7F02AE304",
"2871E71ADA63EA4F8FAF17A46528A63ED",
"4780AD0E51897176F6E6BD193BAE0C2A0",
"4614CE561A3C046544FD4EFEE8715C439",
"23E168C278296EF7D25D1496E1B2D33A6",
"25E59FD2C85623BBA33F27FA0A3C4DEF7",
"156D9ADF9A4ACBA1BD811918964657B7C",
"07619495F25459907AE0BB264D76A0998",
"08B9123F575FA0CCC936D17C1FB656F91",
"32758127B006C40338D56B64CE69AA8F4",
"476B3BB0CD0809C21005537D26AFB195A",
"326FBB25D94B214AEC85432F78AB9D43B",
"27993FB643169A844C1A6BEF19EAF63E9",
"340C055A93568574B9E8EC11D61814B6C",
"47B601002464AED0506E00F5567BCDC4E",
"334016F7C24E91EE237D48D958BE387BF",
"185E5876AD39642D87EFD86536CEE254D",
"189178D3D94D97E1E460B3A58BFBA496B",
"330A0CFCF34A2E3CF3F8BB6AC89AA7C80",
"30DCA0D1F9B3048DDF98610E7D53ACE86",
"21E3F455AB0FBC49A57E46FD0F55D1757",
};
std::string _p131_x_str[] = {
"319F6C84C0CC57042B0B19F175F55C9C3",
"20EA84355CB070CD220FAF99BEC483226",
"07915B68823D2E1BC0D942CA1F35711C0",
"2C7FC2A155292838509167D58FBB03221",
"3FF3BCEBDBD7056384AEDDDA1FD55253F",
"1BE8F404B188AB231B79FAF96CABF1365",
"2B574E89BC32FC1504F4B0C98CE8E7B4D",
"43ECC0DA9C60FB5C63299C4444673510A",
"0E20F6FF01D303F69F45E3D3BA1EBAE67",
"040AEF12652A5A66B166B78062B620D27",
"2FCDCBF2D41707C6D7C3FDC39852DDB64",
"2B7CBA4DB8E68E78A0449372C347DB543",
"1C04AA88A68D198D81C52CD66DB7502CD",
"29EDA27850D1A1321B839FAF6F3664194",
"2FCC05C33C00F233F34249FFD5BBFE001",
"236CAA21BAF762C87C2C4E52CB7041F12",
"000B343970C83A8B61474F45F0843A160",
"23B7BDFFF68C6160FB184955DBA91FAA9",
"1B5E63E624F29793DA9B578AF365160EF",
"3D1E7635A6BF9A0209447F8CB847560E7",
"08450540FD33933CDE57A7BA519B5718F",
"0E98266C689817DC67578B050F194C6FC",
"1059AD93BD9AAE81CEA8EAFAB7EBB405E",
"058D55BB15006D1B2999188661BD3E26B",
"0ACBF65B9B3F035A2353B93426445E03C",
"484796CB131EDCA69A0BBB25C144C6EB5",
"38F9EBDADB2992F10150428DE3A823F25",
"29B6C0391D32CA7C49BB47C6853D09AF9",
"483EA393C4B01FF11C23908C840C7ACA9",
"44FE4EE3F6502F02AEBBB3FFB0E608E79",
"4681CB5BC400D7A5662E4500E5C975F81",
"2B3B8CA6262FB6956CC7EFF51EAE5D97D",
};
std::string _p131_y_str[] = {
"2A5D7AFD42B380243F17FA9E7FC863534",
"21F936FB1BDDD97874340FC967D1541FB",
"2E36E5B55D228E038C549DF9232F74CC9",
"364705775AA1F501A0F016B6E97F53B06",
"448FD46962F6DF7636C8D11D7487FF284",
"14A94076DB863A1AE52616F2A30D95802",
"2F077AE27857C111E8A80897E7F4C3E29",
"3EBDDDE3A78D765182E1CE6E130E7EB26",
"05E4C67157600F5136E3BFCFCF557A46A",
"485BCFD0416C34D8A1BDB301EB5384F0C",
"2979B506A4255D1257874922D1E1FB954",
"24A2896C4CBDF0B53AFD12BD44920DEFB",
"09E25CFF70B4310790E429DF8FF1DCA4D",
"40B57EDB2E7868F0C28D34CB6BDF85537",
"3C9CC6EC3F2EB963AF2929143F99EDD17",
"44DEBDFD9E0C6DE3952B1010E7873FAD8",
"36B1D8946A582F7B766DFC8CE0A3E039F",
"0D75F4CEA118046FBAD23070A1D35A3CF",
"3A8798F4C81FE3D2AC0CC5F6B37846843",
"06158BEBDCD99C4BFA56F735C8109BE6D",
"279D503BCDD428DF3C24AA27D320E9D75",
"0D77CBFD95BD8A384872D6E5B5535748B",
"2219329136F9EF9E5CB90F4287916D0D6",
"2CE5D26796FCF5F3F6605F90FFB785FA4",
"3A06E69C6D95A3AF19EDC73A63264559E",
"211DEFB68E47B1D1E01A82880C66B2F3D",
"0A48572CA5D5059590E594248AFF8E716",
"36F93FFB40EAFC07E57E7800EB497D95C",
"48BAB510C847C1862F538556FCE7FCD31",
"43FCAFE1FD9A5429F099F4E6C28F1098D",
"106C3655057927FAEB168CB6DAB3DC8C2",
"157C7E6B8884F9713CA6A2F8DB358B89B",
};

}

std::vector<RWPoint> get_rw_points()
{
  std::vector<RWPoint> rw_vec;

  for(int i = 0; i < 32; i++) {
    RWPoint rw;

    if(ecc::curve_name() == "ecp131") {
      rw.a = make_uint131(_p131_a_str[i]);
      rw.b = make_uint131(_p131_b_str[i]);
      rw.p = ecc::ecpoint_t(make_uint131(_p131_x_str[i]), make_uint131(_p131_y_str[i]));
    } else if(ecc::curve_name() == "ecp79") {
      rw.a = make_uint131(_p79_a_str[i]);
      rw.b = make_uint131(_p79_b_str[i]);
      rw.p = ecc::ecpoint_t(make_uint131(_p79_x_str[i]), make_uint131(_p79_y_str[i]));
    } else {
      throw std::runtime_error("No curve selected");
    }

    // Validate
    ecc::ecpoint_t p = ecc::add(ecc::mul(rw.a, ecc::g()), ecc::mul(rw.b, ecc::q()));

    assert(ecc::is_equal(p, rw.p));

    rw_vec.push_back(rw);
  }

  return rw_vec;
}



// Encodes a DistinguishedPoint into a string of bytes
std::vector<uint8_t> encode_dp(const DistinguishedPoint& dp, int dbits)
{
  std::vector<uint8_t> buf(128);
  uint8_t* ptr = buf.data();

  // Remove distinguished bits by shifting right then
  // copy into array
  uint131_t x2 = mont::rshift(dp.p.x, dbits);
  
  int len = ((131 - dbits) + 7) / 8;
  memcpy(ptr, &x2, len);
  ptr += len;

  // sign bit: 1 byte
  uint8_t sign = is_odd(dp.p.y) ? 1 : 0;
  *ptr = sign;
  ptr++;

  // exponent
  len = (131 + 7) / 8;
  memcpy(ptr, &dp.a, len);
  ptr += len;

  // Walk length: 40 bits (5 bytes)
  memcpy(ptr, &dp.length, 5);
  ptr += 5;

  // Resize the array
  buf.resize(ptr - buf.data());

  return buf;
}

std::vector<uint8_t> encode_dps(const std::vector<DistinguishedPoint>& dps, int dbits, int curve)
{

  assert(curve == 79 || curve == 131);

  BinaryEncoder encoder;

  // Encode header
  DPHeader header;
  header.version = 1;
  header.count = dps.size();
  header.dbits = dbits;
  header.curve = curve;

  encoder.encode(header);

  // Encode points
  for(auto dp : dps) {
    auto buf = encode_dp(dp, dbits);
    encoder.encode(buf.data(), buf.size());
  }

  // Convert bytes to vector
  std::vector<uint8_t> vec(encoder.get_size());
  memcpy(vec.data(), encoder.get_ptr(), encoder.get_size());

  return vec;
}

DistinguishedPoint decode_dp(const uint8_t* bytes, int dbits)
{
  ecc::ecpoint_t p;
  memset(&p, 0, sizeof(p));

  const uint8_t* ptr = bytes;

  const int a_bytes = (131 + 7) / 8;
  const int x_bytes = ((131 - dbits) + 7) / 8;

  // extract x
  memcpy(&p.x, ptr, x_bytes);
  p.x = mont::lshift(p.x, dbits);
  ptr += x_bytes;

  // sign
  uint8_t sign = *ptr;
  ptr++;
 
  // Calculate y component
  p.y = ecc::calc_y(p.x, sign);

  uint131_t a;
  memset(&a, 0, sizeof(a));
  memcpy(&a, ptr, a_bytes);
  ptr += a_bytes;

  uint64_t length = 0;
  memcpy(&length, ptr, 5);

  assert(ecc::exists(p));

  return DistinguishedPoint(a, p, length);
}

std::vector<DistinguishedPoint> decode_dps(const uint8_t* bytes, size_t size)
{
  BinaryDecoder decoder(bytes, size);
  DPHeader header = decoder.decode<DPHeader>();
  
  assert(header.curve == 79 || header.curve == 131);

  std::vector<DistinguishedPoint> dps;

  int payload_size = size - sizeof(DPHeader);
  assert(payload_size % header.count == 0);

  int field_size = payload_size / header.count;
  std::vector<uint8_t> buf(field_size);

  for(int i = 0; i < header.count; i++) {
    decoder.decode(buf.data(), buf.size());

    dps.push_back(decode_dp(buf.data(), header.dbits));
  }

  return dps;
}